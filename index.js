import { localFileSystem, entrypoints  } from "uxp";

const openFolderBtn = document.getElementById("openFolderBtn");
const refreshBtn = document.getElementById("refreshBtn");
const fileList = document.getElementById("fileList");
const currentPath = document.getElementById("currentPath");
const statusBar = document.getElementById("statusBar");

let currentFolder = null;

// üîπ –í–∏–±—ñ—Ä —Ç–µ–∫–∏
openFolderBtn.addEventListener("click", async () => {
  try {
    currentFolder = await localFileSystem.getFolder();
    if (!currentFolder) return;
    currentPath.textContent = currentFolder.nativePath;
    await loadFolderContents();
  } catch (err) {
    console.error(err);
    statusBar.textContent = "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Ç–µ–∫–∏";
  }
});

// üîπ –û–Ω–æ–≤–ª–µ–Ω–Ω—è
refreshBtn.addEventListener("click", () => {
  if (currentFolder) loadFolderContents();
});

// üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–º—ñ—Å—Ç—É —Ç–µ–∫–∏
async function loadFolderContents() {
  try {
    statusBar.textContent = "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...";
    const entries = await currentFolder.getEntries();
    fileList.innerHTML = "";

    for (const entry of entries) {
      const item = document.createElement("div");
      item.className = "file-item";
      item.textContent = entry.name;

      // –ø–æ–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø
      const label = document.createElement("sp-detail");
      label.size = "xs";
      label.textContent = entry.isFile ? "üìÑ" : "üìÅ";
      item.prepend(label);

      // –∫–ª—ñ–∫ –ø–æ —Ñ–∞–π–ª—É/—Ç–µ—Ü—ñ
      item.addEventListener("click", async () => {
        if (entry.isFolder) {
          currentFolder = entry;
          currentPath.textContent = entry.nativePath;
          await loadFolderContents();
        } else {
          statusBar.textContent = `–§–∞–π–ª: ${entry.name}`;
        }
      });

      fileList.appendChild(item);
    }

    statusBar.textContent = `–ì–æ—Ç–æ–≤–æ (${entries.length} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤)`;
  } catch (err) {
    console.error(err);
    statusBar.textContent = "‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ç–µ–∫–∏";
  }
}

entrypoints.setup({
  panels: {
    mainPanel: {
      show(event) {
        const panel = event.node; // —Ü–µ –∫–æ—Ä–µ–Ω–µ–≤–∏–π DOM –≤—É–∑–æ–ª –ø–∞–Ω–µ–ª—ñ
        try {
          // –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —ñ–∫–æ–Ω–∫—É –ø–∞–Ω–µ–ª—ñ –≤—Ä—É—á–Ω—É
          if (panel && panel.icon === undefined) {
            panel.icon = "icons/icon.png"; // —à–ª—è—Ö –≤—ñ–¥–Ω–æ—Å–Ω–æ manifest.json
          }
        } catch (err) {
          console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —ñ–∫–æ–Ω–∫—É:", err);
        }
      },
    },
  },
});
