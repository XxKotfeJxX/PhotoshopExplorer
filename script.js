// ===================================================
// üîπ Photoshop Project Explorer ‚Äî –æ–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è
// ===================================================

// –Ü–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º–Ω–∏—Ö API
const uxp = require("uxp");
const localFileSystem = uxp.storage.localFileSystem;
const entrypoints = uxp.entrypoints;

// –ï–ª–µ–º–µ–Ω—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
const openFolderBtn = document.getElementById("openFolderBtn");
const refreshBtn = document.getElementById("refreshBtn");
const fileTree = document.getElementById("fileTree");
const currentPath = document.getElementById("currentPath");
const statusBar = document.getElementById("statusBar");

let currentFolder = null;

// üî∏ –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è Photoshop
const SUPPORTED_EXTENSIONS = [
  "psd", "psb", "png", "jpg", "jpeg", "tif", "tiff",
  "gif", "bmp", "tga", "svg", "pdf", "heic", "webp"
];

// ===================================================
// üîπ –í–∏–±—ñ—Ä —Ç–µ–∫–∏
// ===================================================
openFolderBtn.addEventListener("click", async () => {
  try {
    currentFolder = await localFileSystem.getFolder({ allowSystem: true });
    if (!currentFolder) {
      statusBar.textContent = "üö´ –¢–µ–∫—É –Ω–µ –≤–∏–±—Ä–∞–Ω–æ";
      return;
    }

    currentPath.textContent = currentFolder.nativePath || "(–Ω–µ–≤—ñ–¥–æ–º–æ)";
    await renderTree(currentFolder, fileTree);
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Ç–µ–∫–∏:", err);
    statusBar.textContent = "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Ç–µ–∫–∏";
  }
});

// ===================================================
// üîπ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–µ—Ä–µ–≤–∞
// ===================================================
refreshBtn.addEventListener("click", () => {
  if (currentFolder) renderTree(currentFolder, fileTree);
});

// ===================================================
// üîπ –†–µ–∫—É—Ä—Å–∏–≤–Ω–µ –ø–æ–±—É–¥—É–≤–∞–Ω–Ω—è –¥–µ—Ä–µ–≤–∞
// ===================================================
async function renderTree(folder, container) {
  container.innerHTML = "";
  statusBar.textContent = "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...";

  try {
    const entries = await folder.getEntries();
    if (!entries.length) {
      statusBar.textContent = "üìÇ –ü–æ—Ä–æ–∂–Ω—è —Ç–µ–∫–∞";
      return;
    }

    for (const entry of entries) {
      const item = document.createElement("div");
      item.className = "tree-item";
      const icon = document.createElement("span");
      icon.textContent = entry.isFile ? "üìÑ" : "üìÅ";
      const name = document.createElement("span");
      name.textContent = entry.name;
      item.append(icon, name);
      container.appendChild(item);

      // üî∏ –Ø–∫—â–æ —Ü–µ —Ç–µ–∫–∞ ‚Äî –¥–æ–¥–∞—î–º–æ –¥–æ—á—ñ—Ä–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
      if (entry.isFolder) {
        const childrenContainer = document.createElement("div");
        childrenContainer.className = "tree-children";
        childrenContainer.style.display = "none";
        container.appendChild(childrenContainer);

        let expanded = false;
        item.addEventListener("click", async (e) => {
          e.stopPropagation();
          expanded = !expanded;
          if (expanded) {
            icon.textContent = "üìÇ";
            if (!childrenContainer.dataset.loaded) {
              await renderTree(entry, childrenContainer);
              childrenContainer.dataset.loaded = true;
            }
            childrenContainer.style.display = "block";
          } else {
            icon.textContent = "üìÅ";
            childrenContainer.style.display = "none";
          }
        });
      } else {
        // üî∏ –Ø–∫—â–æ —Ü–µ —Ñ–∞–π–ª ‚Äî –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø—Ä–∏ –∫–ª—ñ–∫—É
        item.addEventListener("click", async (e) => {
          e.stopPropagation();
          await openFile(entry);
        });
      }
    }

    statusBar.textContent = `‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${entries.length} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤`;
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–±—É–¥–æ–≤—ñ –¥–µ—Ä–µ–≤–∞:", err);
    statusBar.textContent = "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ç–µ–∫—É";
  }
}

// ===================================================
// üîπ –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª —É Photoshop (—á–µ—Ä–µ–∑ executeAsModal)
// ===================================================
async function openFile(fileEntry) {
  const { app, core } = require("photoshop");
  try {
    const ext = fileEntry.name.split(".").pop().toLowerCase();

    if (!SUPPORTED_EXTENSIONS.includes(ext)) {
      statusBar.textContent = `‚ö†Ô∏è ${fileEntry.name} ‚Äî —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è`;
      return;
    }

    statusBar.textContent = `üìÇ –í—ñ–¥–∫—Ä–∏—Ç—Ç—è: ${fileEntry.name}`;

    await core.executeAsModal(async () => {
      await app.open(fileEntry);
    }, { commandName: "–í—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Explorer" });

    statusBar.textContent = `‚úÖ –í—ñ–¥–∫—Ä–∏—Ç–æ ${fileEntry.name}`;
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ —Ñ–∞–π–ª—É:", err);
    statusBar.textContent = "‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª";
  }
}


// ===================================================
// üîπ entrypoints
// ===================================================
entrypoints.setup({
  panels: {
    mainPanel: {
      show(event) {
        const panel = event.node;
        try {
          if (panel && !panel.icon) {
            panel.icon = "icons/icon.png";
          }
        } catch (err) {
          console.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —ñ–∫–æ–Ω–∫—É:", err);
        }
      },
    },
  },
});

console.log("‚úÖ Project Explorer –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ");
